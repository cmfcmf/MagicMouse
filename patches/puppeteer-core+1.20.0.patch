diff --git a/node_modules/puppeteer-core/lib/Events.js b/node_modules/puppeteer-core/lib/Events.js
index c994de5..fbc9d65 100644
--- a/node_modules/puppeteer-core/lib/Events.js
+++ b/node_modules/puppeteer-core/lib/Events.js
@@ -36,6 +36,7 @@ const Events = {
     Popup: 'popup',
     WorkerCreated: 'workercreated',
     WorkerDestroyed: 'workerdestroyed',
+    ScreencastFrame: 'screencastframe'
   },
 
   Browser: {
diff --git a/node_modules/puppeteer-core/lib/Page.js b/node_modules/puppeteer-core/lib/Page.js
index 0ec70f5..4cadbec 100644
--- a/node_modules/puppeteer-core/lib/Page.js
+++ b/node_modules/puppeteer-core/lib/Page.js
@@ -124,6 +124,7 @@ class Page extends EventEmitter {
     client.on('Performance.metrics', event => this._emitMetrics(event));
     client.on('Log.entryAdded', event => this._onLogEntryAdded(event));
     client.on('Page.fileChooserOpened', event => this._onFileChooser(event));
+    client.on('Page.screencastFrame', event => this.emit(Events.Page.ScreencastFrame, event));
     this._target._isClosedPromise.then(() => {
       this.emit(Events.Page.Close);
       this._closed = true;
@@ -176,6 +177,54 @@ class Page extends EventEmitter {
     });
   }
 
+  /**
+   * @param {!Object=} options
+   * @return {!Promise}
+   */
+  async startScreencast(options = {}) {
+    if (options.format)
+      console.assert(options.format === 'png' || options.format === 'jpeg', 'Unknown options.format value: ' + options.format);
+
+    if (options.quality) {
+      console.assert(screenshotType === 'jpeg', 'options.quality is unsupported for the ' + screenshotType + ' screenshots');
+      console.assert(typeof options.quality === 'number', 'Expected options.quality to be a number but found ' + (typeof options.quality));
+      console.assert(Number.isInteger(options.quality), 'Expected options.quality to be an integer');
+      console.assert(options.quality >= 0 && options.quality <= 100, 'Expected options.quality to be between 0 and 100 (inclusive), got ' + options.quality);
+    }
+    if (options.maxWidth) {
+      console.assert(typeof options.maxWidth === 'number', 'Expected options.maxWidth to be a number but found ' + (typeof options.maxWidth));
+      console.assert(Number.isInteger(options.maxWidth), 'Expected options.maxWidth to be an integer');
+      console.assert(options.maxHeight >= 0, 'Expected options.maxWidth to be greater than 0, got ' + options.maxWidth);
+    }
+    if (options.maxHeight) {
+      console.assert(typeof options.maxHeight === 'number', 'Expected options.maxHeight to be a number but found ' + (typeof options.maxHeight));
+      console.assert(Number.isInteger(options.maxHeight), 'Expected options.maxHeight to be an integer');
+      console.assert(options.maxHeight >= 0, 'Expected options.maxHeight to be greater than 0, got ' + options.maxHeight);
+    }
+    if (options.everyNthFrame) {
+      console.assert(typeof options.everyNthFrame === 'number', 'Expected options.everyNthFrame to be a number but found ' + (typeof options.everyNthFrame));
+      console.assert(Number.isInteger(options.everyNthFrame), 'Expected options.everyNthFrame to be an integer');
+      console.assert(options.everyNthFrame >= 0, 'Expected options.everyNthFrame to be greater than 0, got ' + options.everyNthFrame);
+    }
+    await this._client.send('Page.startScreencast', options);
+  }
+
+  /**
+   * @param {!number} sessionId
+   * @return {!Promise}
+   */
+  async screencastFrameAck(sessionId) {
+    console.assert(sessionId, 'Expected sessionId');
+    await this._client.send('Page.screencastFrameAck', { sessionId });
+  }
+
+  /**
+   * @return {!Promise}
+   */
+  async stopScreencast() {
+    await this._client.send('Page.stopScreencast');
+  }
+
   /**
    * @param {!{longitude: number, latitude: number, accuracy: (number|undefined)}} options
    */
